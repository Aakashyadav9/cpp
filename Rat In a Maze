bool sol(int i, int j, vector<vector<int>> &maze, vector<vector<int>> &ans, 
        vector<vector<int>> &visit, int n){
    //condition check
    if(i<0 || j<0 || i>=n || j>=n || visit[i][j] == 1 || maze[i][j] == 0 ){
        return 0;
    }
    if(i == n-1 && j == n-1 && maze[i][j] == 1){
        vector<int> path;
        visit[i][j] = 1;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                path.push_back(visit[i][j]);
            }
        }
        ans.push_back(path);
    }
    
    visit[i][j] = 1;
    sol(i+1, j, maze, ans, visit, n);
    sol(i, j-1, maze, ans, visit, n);
    sol(i, j+1, maze, ans, visit, n);
    sol(i-1, j, maze, ans, visit, n);
    visit[i][j] = 0;  //backtracking;
}
vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
    vector<vector<int>> ans;
    vector<vector<int>> visit (n,vector<int> (n,0));
    
    if(maze[0][0] == 1){
        sol(0,0,maze, ans, visit, n);
    }
    
    return ans;
}
