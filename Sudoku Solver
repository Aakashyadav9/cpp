class Solution {
public:
    bool is_valid(vector<vector<char>> &board, int row, int col, char c){
        
        for(int i=0; i<9; i++){
            if(board[i][col] == c){
                return false;
            }
            if(board[row][i] == c){
                return false;
            }
            if(board[3*(row/3) + i/3][3*(col/3)+ i%3] == c){
                return false;
            }
        }
        return true;
    }    
public:
    bool sol(vector<vector<char>>& board) {
        //vector<vector<char>> ans;
        //vector<char> temp;
        
        for(int i=0;i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                
                if(board[i][j] == '.'){
                    for(char c = '1'; c<= '9'; c++){
                        if(is_valid(board,i,j,c)){
                            board[i][j] = c;
                            
                            if(sol(board)){
                                return true;
                                // continue;
                            }
                            else{
                                board[i][j] = '.';
                            }
                            
                        }
                    }
                    return false;
                }
                
            }
            
        }
        return true;
   
    }
     void solveSudoku(vector<vector<char>>& board){
         sol(board);
     }
};
